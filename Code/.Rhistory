cv_lasso_model <- cv.glmnet(x = lasso_training_predictors, y = lasso_training_outcomes,
alpha = 1, family = "binomial")
plot(cv_lasso_model)
lamda_1se <- cv_lasso_model$lambda.1se
coef(cv_lasso_model, s = lamda_1se)
lasso_testing_predictors <- testing_data %>%
select(AGE_AT_ADMISSION, FEMALE, BLACK, HISPANIC, OTHER) %>%
as.matrix()
testing_data$lasso_predictions <- predict(cv_lasso_model,
newx = lasso_testing_predictors,
s=lamda_1se, type="response")
testing_data %>%
ggplot(aes(d = DEATH, m = lasso_predictions)) +
geom_roc() +
geom_abline(intercept = 0, slope = 1)
lasso_training_predictors <- training_data %>%
select(AGE_AT_ADMISSION, FEMALE, BLACK, HISPANIC, OTHER) %>%
as.matrix()
lasso_training_outcomes <- training_data$DEATH %>%
as.vector()
cv_lasso_model <- cv.glmnet(x = lasso_training_predictors, y = lasso_training_outcomes,
alpha = 1, family = "binomial")
plot(cv_lasso_model)
lamda_1se <- cv_lasso_model$lambda.1se
coef(cv_lasso_model, s = lamda_1se)
lasso_testing_predictors <- testing_data %>%
select(AGE_AT_ADMISSION, FEMALE, BLACK, HISPANIC, OTHER) %>%
as.matrix()
testing_data$lasso_predictions <- predict(cv_lasso_model,
newx = lasso_testing_predictors,
s=lamda_1se, type="response")
testing_data %>%
ggplot(aes(d = DEATH, m = lasso_predictions)) +
geom_roc() +
geom_abline(intercept = 0, slope = 1)
lasso_training_predictors <- training_data %>%
select(AGE_AT_ADMISSION, FEMALE, BLACK, HISPANIC, OTHER) %>%
as.matrix()
lasso_training_outcomes <- training_data$DEATH %>%
as.vector()
cv_lasso_model <- cv.glmnet(x = lasso_training_predictors, y = lasso_training_outcomes,
alpha = 1, family = "binomial")
plot(cv_lasso_model)
lamda_1se <- cv_lasso_model$lambda.1se
coef(cv_lasso_model, s = lamda_1se)
lasso_testing_predictors <- testing_data %>%
select(AGE_AT_ADMISSION, FEMALE, BLACK, HISPANIC, OTHER) %>%
as.matrix()
testing_data$lasso_predictions <- predict(cv_lasso_model,
newx = lasso_testing_predictors,
s=lamda_1se, type="response")
testing_data %>%
ggplot(aes(d = DEATH, m = lasso_predictions)) +
geom_roc() +
geom_abline(intercept = 0, slope = 1)
randomforest_training_data <- training_data %>%
select(DEATH, AGE_AT_ADMISSION, FEMALE, BLACK, HISPANIC, OTHER)
randomforest_testing_data <- testing_data %>%
select(DEATH, AGE_AT_ADMISSION, FEMALE, BLACK, HISPANIC, OTHER)
randomforest_model <- randomForest(DEATH ~ ., data = randomforest_training_data,
ntrees = 1000, mtry = 4, na.action = na.omit)
randomforest_model
plot(randomforest_model)
importance(randomforest_model)
testing_data$rf_predictions <- predict(randomforest_model, randomforest_testing_data)
testing_data %>%
ggplot(aes(d = DEATH, m = rf_predictions)) +
geom_roc() +
geom_abline(intercept = 0, slope = 1)
aneurysm_predictors %<>%
mutate(within_24_admit = ADMITTIME + hours(24))
## dplyr has a function between() that should be a prettier filter,
## but it's throwing an error in this example... weird.
weight %>%
mutate(CHARTTIME = as_datetime(CHARTTIME)) %>%
inner_join(aneurysm_predictors) %>%
filter(CHARTTIME >= ADMITTIME & CHARTTIME <= within_24_admit) %>%
select(ROW_ID, CHARTTIME, ADMITTIME, CHARTTIME) %>%
head()
aneurysm_predictors %>%
count(ADMITTIME, within_24_admit, CHARTTIME)
aneurysm_predictors %<>%
mutate(within_24_admit = ADMITTIME + hours(24))
## dplyr has a function between() that should be a prettier filter,
## but it's throwing an error in this example... weird.
weight %>%
mutate(CHARTTIME = as_datetime(CHARTTIME)) %>%
inner_join(aneurysm_predictors) %>%
filter(CHARTTIME >= ADMITTIME & CHARTTIME <= within_24_admit) %>%
select(ROW_ID, CHARTTIME, ADMITTIME, CHARTTIME) %>%
head()
# tuning random forest over mtry parameter in parallel
library(foreach)
library(randomForest)
# a simple iterator over different values for the mtry argument
mtryiter <- function(from, to, stepFactor=2) {
nextEl <- function() {
if (from > to) stop('StopIteration')
i <- from
from <<- ceiling(from * stepFactor)
i
}
obj <- list(nextElem=nextEl)
class(obj) <- c('abstractiter', 'iter')
obj
}
# vector of ntree values that we're interested in
vntree <- c(25, 50, 100, 200, 500, 1000)
# function that gets random forest error information for different values of mtry
tune <- function(x, y, ntree=vntree, mtry=NULL, keep.forest=FALSE, ...) {
comb <- if (is.factor(y))
function(a, b) rbind(a, data.frame(ntree=ntree, mtry=b$mtry, error=b$err.rate[ntree, 1]))
else
function(a, b) rbind(a, data.frame(ntree=ntree, mtry=b$mtry, error=b$mse[ntree]))
foreach(mtry=mtryiter(1, ncol(x)), .combine=comb, .init=NULL,
.packages='randomForest') %dopar% {
randomForest(x, y, ntree=max(ntree), mtry=mtry, keep.forest=FALSE, ...)
}
}
# generate the inputs
x <- matrix(runif(2000), 100)
y <- gl(2, 50)
# execute randomForest
results <- tune(x, y)
# print the result
print(results)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(tidyverse)
library(magrittr)
cats2%>%
createDataPartition(times = 2, p = 0.8)
View(VAdata3)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(magrittr)
library(readr)
library(bigrquery)
library(tidyr)
library(purrr)
library(broom)
library(glmnet)
library(randomForest)
library(lubridate)
library(ggplot2)
library(plotROC)
project_id <- "hdc-class-bsbt6310"
## Setting a seed values ensures replicability for all randomizing operations
set.seed(3302018)
knitr::opts_chunk$set(echo = TRUE)
set.seed(3302018)
options("httr_oob_default" = TRUE)
aneurysm_outcomes <- query_exec(query = "select * from mimic3.ANEURYSM_OUTCOMES",
project = project_id, use_legacy_sql = F)
aneurysm_outcomes %>% count(DEATH)
aneurysm_outcomes %>%
ggplot() +
geom_histogram(aes(x = LOS)) +
facet_grid(DEATH ~ .)
# things that are stable about the pt
patients <- query_exec(query = "select a.* from mimic3.PATIENTS a inner join
mimic3.ANEURYSM_OUTCOMES b on a.SUBJECT_ID = b.SUBJECT_ID",
project = project_id, use_legacy_sql = F)
patients %>% head()
# things about stay, ethnicity is subjective determined by provider
admissions <- query_exec(query = "select a.* from mimic3.ADMISSIONS a inner join
mimic3.ANEURYSM_OUTCOMES b on a.SUBJECT_ID = b.SUBJECT_ID
and a.HADM_ID = b.HADM_ID", project = project_id,
use_legacy_sql = F)
admissions %>% head()
View(admissions)
aneurysm_predictors <- admissions %>%
select(SUBJECT_ID, HADM_ID, ADMITTIME, ETHNICITY) %>%
inner_join(patients %>%
select(SUBJECT_ID, GENDER, DOB))
aneurysm_predictors %>% head()
aneurysm_predictors %<>%
mutate(ADMITTIME = as_datetime(ADMITTIME),
DOB = as_datetime(DOB),
AGE_AT_ADMISSION = ((ADMITTIME - DOB)/365) %>% round(digits = 2) %>% as.numeric())
aneurysm_predictors %>% head(10)
aneurysm_predictors %<>%
mutate(AGE_AT_ADMISSION = case_when(AGE_AT_ADMISSION > 100 ~ 91.4,
TRUE ~ AGE_AT_ADMISSION))
View(aneurysm_predictors)
aneurysm_predictors %>%
count(ETHNICITY)
aneurysm_predictors %<>%
mutate(BLACK = case_when(ETHNICITY == "BLACK/AFRICAN" ~ 1,
ETHNICITY == "BLACK/AFRICAN AMERICAN" ~ 1,
ETHNICITY == "BLACK/CAPE VERDEAN" ~ 1,
TRUE ~ 0),
HISPANIC = case_when(ETHNICITY == "HISPANIC OR LATINO" ~ 1,
ETHNICITY == "HISPANIC/LATINO - COLOMBIAN" ~ 1,
ETHNICITY == "HISPANIC/LATINO - DOMINICAN" ~ 1,
ETHNICITY == "HISPANIC/LATINO - PUERTO RICAN" ~ 1,
ETHNICITY == "HISPANIC/LATINO - SALVADORAN" ~ 1,
TRUE ~ 0),
OTHER = case_when(ETHNICITY == "WHITE" ~ 0,
ETHNICITY == "WHITE - BRAZILIAN" ~ 0,
BLACK == 1 ~ 0,
HISPANIC == 1 ~ 0,
TRUE ~ 1))
aneurysm_predictors %>%
count(ETHNICITY, BLACK, HISPANIC, OTHER)
aneurysm_predictors %>%
count(GENDER)
aneurysm_predictors %<>%
mutate(FEMALE = case_when(GENDER == "F" ~ 1,
TRUE ~ 0))
aneurysm_predictors %>% count(GENDER, FEMALE)
weight <- query_exec(query = "select a.* from mimic3.CHARTEVENTS a inner join
mimic3.ANEURYSM_OUTCOMES b on a.SUBJECT_ID = b.SUBJECT_ID
and a.HADM_ID = b.HADM_ID where ITEMID in (763, 224639)",
project = project_id, use_legacy_sql = F)
first_weight <- weight %>%
mutate(CHARTTIME = as_datetime(CHARTTIME)) %>%
group_by(SUBJECT_ID, HADM_ID) %>%
mutate(first_weight_time = min(CHARTTIME)) %>%  #create new variable for first weight time
filter(CHARTTIME == first_weight_time) %>%       # filter when chart time min is first weight
select(SUBJECT_ID, HADM_ID, FIRST_WEIGHT = VALUENUM)
aneurysm_predictors %<>%
left_join(first_weight)
aneurysm_predictors %>% head()
bloodpressure <- query_exec(query = "select a.* from mimic3.CHARTEVENTS a inner join
mimic3.ANEURYSM_OUTCOMES b on a.SUBJECT_ID = b.SUBJECT_ID
and a.HADM_ID = b.HADM_ID where ITEMID in (455, 8441,
220179, 220180)", project = project_id, use_legacy_sql = F)
## Add meaningful labels and remove errors
bloodpressure %<>%
mutate(label = case_when(ITEMID == 455 | ITEMID == 220179 ~ "SYSTOLIC_BP",
TRUE ~ "DIASTOLIC_BP")) %>%
filter(ERROR!=1)
## Transform Data to handle entries at same time point (summarise)
## and separate systolic and distolic bps (spread)
bloodpressure %<>%
select(SUBJECT_ID, HADM_ID, CHARTTIME, VALUENUM, label) %>%
group_by(SUBJECT_ID, HADM_ID, CHARTTIME, label) %>%
summarise(VALUENUM = median(VALUENUM)) %>%
group_by(SUBJECT_ID, HADM_ID, CHARTTIME) %>%
spread(key = label, value = VALUENUM)
bloodpressure %>% head()
first_bloodpressure <- bloodpressure %>%
group_by(SUBJECT_ID, HADM_ID) %>%
arrange(CHARTTIME) %>%
mutate(BP_ORDER = 1:length(HADM_ID)) %>%
filter(BP_ORDER==1) %>%
select(SUBJECT_ID, HADM_ID, FIRST_SYSTOLIC_BP = SYSTOLIC_BP,
FIRST_DIASTOLIC_BP = DIASTOLIC_BP)
aneurysm_predictors %<>%
left_join(first_bloodpressure)
aneurysm_predictors %>% head(15)
View(first_weight)
View(first_bloodpressure)
View(aneurysm_predictors)
View(first_bloodpressure)
aneurysm_predictors %<>%
left_join(first_bloodpressure)
aneurysm_predictors %>% head(15)
library(Hmisc)
aneurysm_predictors %>%
describe()
aneurysm_predictors <- admissions %>%
select(SUBJECT_ID, HADM_ID, ADMITTIME, ETHNICITY, INSURANCE) %>%
inner_join(patients %>%
select(SUBJECT_ID, GENDER, DOB))
aneurysm_predictors %>% head()
aneurysm_predictors %<>%
mutate(ADMITTIME = as_datetime(ADMITTIME),
DOB = as_datetime(DOB),
AGE_AT_ADMISSION = ((ADMITTIME - DOB)/365) %>% round(digits = 2) %>% as.numeric())
aneurysm_predictors %>% head(10)
aneurysm_predictors %<>%
mutate(AGE_AT_ADMISSION = case_when(AGE_AT_ADMISSION > 100 ~ 91.4,
TRUE ~ AGE_AT_ADMISSION))
aneurysm_predictors %>%
count(ETHNICITY)
aneurysm_predictors %<>%
mutate(BLACK = case_when(ETHNICITY == "BLACK/AFRICAN" ~ 1,
ETHNICITY == "BLACK/AFRICAN AMERICAN" ~ 1,
ETHNICITY == "BLACK/CAPE VERDEAN" ~ 1,
TRUE ~ 0),
HISPANIC = case_when(ETHNICITY == "HISPANIC OR LATINO" ~ 1,
ETHNICITY == "HISPANIC/LATINO - COLOMBIAN" ~ 1,
ETHNICITY == "HISPANIC/LATINO - DOMINICAN" ~ 1,
ETHNICITY == "HISPANIC/LATINO - PUERTO RICAN" ~ 1,
ETHNICITY == "HISPANIC/LATINO - SALVADORAN" ~ 1,
TRUE ~ 0),
OTHER = case_when(ETHNICITY == "WHITE" ~ 0,
ETHNICITY == "WHITE - BRAZILIAN" ~ 0,
BLACK == 1 ~ 0,
HISPANIC == 1 ~ 0,
TRUE ~ 1))
aneurysm_predictors %>%
count(ETHNICITY, BLACK, HISPANIC, OTHER)
aneurysm_predictors %>%
count(GENDER)
aneurysm_predictors %<>%
mutate(FEMALE = case_when(GENDER == "F" ~ 1,
TRUE ~ 0))
aneurysm_predictors %>% count(GENDER, FEMALE)
weight <- query_exec(query = "select a.* from mimic3.CHARTEVENTS a inner join
mimic3.ANEURYSM_OUTCOMES b on a.SUBJECT_ID = b.SUBJECT_ID
and a.HADM_ID = b.HADM_ID where ITEMID in (763, 224639)",
project = project_id, use_legacy_sql = F)
first_weight <- weight %>%
mutate(CHARTTIME = as_datetime(CHARTTIME)) %>%
group_by(SUBJECT_ID, HADM_ID) %>%
mutate(first_weight_time = min(CHARTTIME)) %>%  #create new variable for first weight time
filter(CHARTTIME == first_weight_time) %>%       # filter when chart time min is first weight
select(SUBJECT_ID, HADM_ID, FIRST_WEIGHT = VALUENUM)
aneurysm_predictors %<>%
left_join(first_weight)
aneurysm_predictors %>% head()
bloodpressure <- query_exec(query = "select a.* from mimic3.CHARTEVENTS a inner join
mimic3.ANEURYSM_OUTCOMES b on a.SUBJECT_ID = b.SUBJECT_ID
and a.HADM_ID = b.HADM_ID where ITEMID in (455, 8441,
220179, 220180)", project = project_id, use_legacy_sql = F)
## Add meaningful labels and remove errors
bloodpressure %<>%
mutate(label = case_when(ITEMID == 455 | ITEMID == 220179 ~ "SYSTOLIC_BP",
TRUE ~ "DIASTOLIC_BP")) %>%
filter(ERROR!=1)
## Transform Data to handle entries at same time point (summarise)
## and separate systolic and distolic bps (spread)
bloodpressure %<>%
select(SUBJECT_ID, HADM_ID, CHARTTIME, VALUENUM, label) %>%
group_by(SUBJECT_ID, HADM_ID, CHARTTIME, label) %>%
summarise(VALUENUM = median(VALUENUM)) %>%
group_by(SUBJECT_ID, HADM_ID, CHARTTIME) %>%
spread(key = label, value = VALUENUM)
bloodpressure %>% head()
first_bloodpressure <- bloodpressure %>%
group_by(SUBJECT_ID, HADM_ID) %>%
arrange(CHARTTIME) %>%
mutate(BP_ORDER = 1:length(HADM_ID)) %>%
filter(BP_ORDER==1) %>%
select(SUBJECT_ID, HADM_ID, FIRST_SYSTOLIC_BP = SYSTOLIC_BP,
FIRST_DIASTOLIC_BP = DIASTOLIC_BP)
aneurysm_predictors %<>%
left_join(first_bloodpressure)
aneurysm_predictors %>% head(15)
aneurysm_predictors %>%
describe()
antihypertensives <- query_exec(query = "select a.SUBJECT_ID a.HADM_ID a.DRUG from mimic3.ANTIHYPERTENSIVES a inner join
mimic3.ANEURYSM_OUTCOMES b on a.SUBJECT_ID = b.SUBJECT_ID
and a.HADM_ID = b.HADM_ID ", project = project_id, use_legacy_sql = F)
antihypertensives <- query_exec(query = "select a.SUBJECT_ID, a.HADM_ID, a.DRUG from mimic3.ANTIHYPERTENSIVES a inner join
mimic3.ANEURYSM_OUTCOMES b on a.SUBJECT_ID = b.SUBJECT_ID
and a.HADM_ID = b.HADM_ID ", project = project_id, use_legacy_sql = F)
View(antihypertensives)
antihypertensives <- query_exec(query = "select a.SUBJECT_ID, a.HADM_ID, a.DRUG from mimic3.ANTIHYPERTENSIVES a inner join
mimic3.ANEURYSM_OUTCOMES b on a.SUBJECT_ID = b.SUBJECT_ID
and a.HADM_ID = b.HADM_ID
groupby a.SUBJECT_ID, a.HADM_ID", project = project_id, use_legacy_sql = F)
View(bloodpressure)
antihypertensives %<>%
mutate(antihypertensive_use = 1))
antihypertensives %<>%
mutate(antihypertensive_use = 1)
antihypertensives %<>%
mutate(antihypertensive_use = 1) %>%
group_by(SUBJECT_ID, HADM_ID)
antihypertensives %<>%
mutate(antihypertensive_use = 1) %>%
group_by(SUBJECT_ID, HADM_ID)
antihypertensives %>%
head()
antihypertensives %>%
head()
bloodpressure %>% head()
antihypertensives %>%
head()
antihypertensives %<>%
mutate(antihypertensive_use = 1) %>%
group_by(SUBJECT_ID, HADM_ID, DRUG)
antihypertensives %>%
head()
antihypertensives%>%
select(SUBJECT_ID, HADM_ID, DRUG, antihypertensive_use)
group_by(SUBJECT_ID, HADM_ID, DRUG)
antihypertensives %>%
select(SUBJECT_ID, HADM_ID, DRUG, antihypertensive_use)
group_by(SUBJECT_ID, HADM_ID, DRUG, label)
antihypertensives %>%
select(SUBJECT_ID, HADM_ID, DRUG, antihypertensive_use)
group_by(SUBJECT_ID, HADM_ID, DRUG, label)
View(antihypertensives)
antihypertensives <- query_exec(query = "select a.SUBJECT_ID, a.HADM_ID, a.DRUG from mimic3.ANTIHYPERTENSIVES a inner join
mimic3.ANEURYSM_OUTCOMES b on a.SUBJECT_ID = b.SUBJECT_ID
and a.HADM_ID = b.HADM_ID", project = project_id, use_legacy_sql = F)
antihypertensives %<>%
mutate(antihypertensive_use = 1)
antihypertensives %>%
select(SUBJECT_ID, HADM_ID, DRUG, antihypertensive_use)
group_by(SUBJECT_ID, HADM_ID, DRUG)
antihypertensives %>%
select(SUBJECT_ID, HADM_ID, DRUG, antihypertensive_use) %>%
group_by(SUBJECT_ID, HADM_ID, DRUG)
antihypertensives %>% head()
antihypertensives %>%
select(SUBJECT_ID, HADM_ID, DRUG, antihypertensive_use) %>%
group_by(SUBJECT_ID, HADM_ID, DRUG)
antihypertensives %>% head()
antihypertensives %>%
select(SUBJECT_ID, HADM_ID, DRUG, antihypertensive_use) %>%
group_by(SUBJECT_ID, HADM_ID, DRUG) %>%
head()
antihypertensives <- query_exec(query = "select a.SUBJECT_ID, a.HADM_ID, a.DRUG from mimic3.ANTIHYPERTENSIVES a inner join
mimic3.ANEURYSM_OUTCOMES b on a.SUBJECT_ID = b.SUBJECT_ID
and a.HADM_ID = b.HADM_ID
group by a.SUBJECT_ID, a.HADM_ID, a.DRUG", project = project_id, use_legacy_sql = F)
antihypertensives %>%
select(SUBJECT_ID, HADM_ID, DRUG, antihypertensive_use) %>%
count(distinct(DRUG))
antihypertensives %<>%
mutate(antihypertensive_use = 1)
antihypertensives %>%
select(SUBJECT_ID, HADM_ID, DRUG, antihypertensive_use) %>%
count(distinct(DRUG))
antihypertensives %>%
select(SUBJECT_ID, HADM_ID, DRUG, antihypertensive_use) %>%
count(antihypertensive_use) %>%
antihypertensives %>%
select(SUBJECT_ID, HADM_ID, DRUG, antihypertensive_use) %>%
count(antihypertensive_use) %>%
head()
antihypertensives %>%
select(SUBJECT_ID, HADM_ID, DRUG, antihypertensive_use) %>%
count(antihypertensive_use) %>%
head()
antihypertensives %>%
select(SUBJECT_ID, HADM_ID, DRUG, antihypertensive_use) %>%
mutate(useDrugs = case_when(DRUG >=2)
antihypertensives %<>%
antihypertensives %<>%
select(SUBJECT_ID, HADM_ID, DRUG, antihypertensive_use) %>%
mutate(useDrugs = case_when(DRUG >=2)
antihypertensives %<>%
antihypertensives %<>%
mutate(useDrugs = case_when(DRUG >=2 ~ 1,
TRUE = 0))
antihypertensives %<>%
group_by(SUBJECT_ID, HADM_ID, DRUG) %>%
mutate(count= n())
antihypertensives %<>%
group_by(SUBJECT_ID, HADM_ID) %>%
mutate(count= n())
antihypertensives %<>%
group_by(SUBJECT_ID, HADM_ID) %>%
mutate(count= n())%>%
filter(count >= 2)
aneurysm_predictors %<>%
left_join(antihypertensives)
antihypertensives %<>%
group_by(SUBJECT_ID, HADM_ID) %>%
mutate(count= n())%>%
filter(count >= 2) %>%
mutate(antihypertensive_use = coalesce(antihypertensive_use, 0))
aneurysm_predictors %<>%
left_join(antihypertensives) %>%
mutate(antihypertensive_use = coalesce(antihypertensive_use, 0))
aneurysm_predictors %>%
describe()
library(tidyverse)
library( magrittr)
library(readr)
data_collected_per_year <- read_csv("Repositories/HealthyHeartsDB/Code/Data/data collected per year.csv")
View(data_collected_per_year)
getwd()
setwd("~/Repositories/HealthyHeartsDB/Code")
dataPerYear <- read_csv("~/Data/data collected per year.csv")
getwd()
dataPerYear <- read_csv("~Code/Data/data collected per year.csv")
dataPerYear <- read_csv("~/Code/Data/data collected per year.csv")
dataPerYear <- read_csv("Data/data collected per year.csv")
dataPerYear <- read_csv("Data/data collected per year.csv") %>%
head()
dataPerYear %>%
head()
dataPerYear %>%
ggplot(aes(x = Year)) + geom_line(aes(fill = ~))
dataPerYear %>%
ggplot(aes(x = Year, y = Elementary)) + geom_line()
dataPerYear %>%
ggplot(aes(x = Year ) + geom_smooth()
dataPerYear %>%
ggplot(aes(x = Year, y = Elementary )) + geom_smooth()
dataPerYear %>%
ggplot(aes(x = Year, y = Elementary)) + geom_smooth()
dataPerYear %>%
ggplot(aes(x = Year)) +
geom_smooth(aes(Elementary)) +
geom_smooth(aes(Middle)) +
geom_smooth(aes(High))
dataPerYear %>%
ggplot(aes(x = Year)) +
geom_smooth(aes(y = Elementary)) +
geom_smooth(aes(y = Middle)) +
geom_smooth(aes(y= High))
dataPerYear %>%
ggplot(aes(x = Year)) +
geom_smooth(aes(y = Elementary, color = "Elementary")) +
geom_smooth(aes(y = Middle, color = "Middle")) +
geom_smooth(aes(y= High, color = "High"))
dataPerYear %>%
ggplot(aes()) +
geom_smooth(aes(x = Year, y = Elementary, color = "Elementary")) +
geom_smooth(aes(x = Year, y = Middle, color = "Middle")) +
geom_smooth(aes(x = Year, y= High, color = "High"))
aneurysm_predictors %>%
describe()
